from copy import copy
import sage.all
from sage.matrix.all import *
from sage.rings.finite_rings.all import *
from sage.modules.free_module_element import *
out_res = [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0]
output_len = len(out_res)

char_vec = [int(c) for c in bin(0xda785fc480000001)[2:].zfill(64)]
mat = matrix(GF(2), 64, 64)
for i in range(63, -1, -1):
    mat[i,0] = char_vec[i]
for i in range(1, 64):
    mat[i-1, i] = 1
mat_36 = mat**36
mat_37 = mat**37
init_mat = copy(mat_36)
for i in range(output_len-70):
    init_mat =  mat_37 * init_mat
    #print(hex(int("".join([str(i) for i in init_state]), 2)))
solv_mat = []
solv_mat.append(init_mat[0])

for i in range(69):
    init_mat =  mat_37 * init_mat
    if len(solv_mat) != 64:
        solv_mat.append(init_mat[0])

correct = out_res
correct = correct[-70:]

solv_mat = matrix(GF(2), 64, 64, solv_mat).inverse()
ct = vector(GF(2), correct[:64])
ori_state = solv_mat * ct
state = int("".join([str(i) for i in ori_state]), 2)

def getbit():
    global state
    state <<= 1
    if state & (1 << 64):
        state ^= 0x1da785fc480000001
        return 1
    return 0

output = []
for _ in range(output_len):
    for __ in range(36):
        getbit()
    output.append(getbit())
flag = [output[i] ^ out_res[i]  for i in range(output_len)][:-70]
print(int("".join([str(i) for i in flag]), 2).to_bytes(len(flag) // 8, 'big'))